#!/usr/bin/env python

import argparse
import sys

import phonenumbers
import requests
from sqlalchemy import create_engine, MetaData, Table
from sqlalchemy.sql import select, and_
from sqlalchemy.sql.expression import func

from common import logger, upload_data_to_commcare

TWILIO_LOOKUP_URL = "https://lookups.twilio.com/v1/PhoneNumbers"
COMMCARE_CAN_RECIEVE_SMS_FIELD_NAME = "contact_phone_can_receive_sms"

WHITE_LISTED_TWILIO_CODES = [
    404,
]


class TwilioLookUpError(Exception):
    def __init__(self, message, info):
        super(TwilioLookUpError, self).__init__(message)
        self.info = info


def format_phone_number(raw, region="US"):
    """Format raw phone number into standardized format required by Twilio lookup API

    Args:
        raw (str): raw string representing a phone number
        region (str): the expected region of the phone number. Defaults to US.

    Returns:
        str: Number formatted to Twilio lookup spec `+<country_code><national_number>`
    """
    parsed = phonenumbers.parse(raw, region=region)
    return f"+{parsed.country_code}{parsed.national_number}"


def twilio_lookup_phone_number_type(formatted_number, sid, auth_token):
    """Determine phone number carrier type for a formatted number

    Args:
        formatted_number (str): Appropriately formatted number
            `+<country_code><national_number>`
        sid (str): A Twilio SID
        auth_token (str): A Twilio auth token

    Returns:
        str indicating carrier type if number can be looked up, else None
        if number can't be looked up.
    """
    response = requests.get(
        f"{TWILIO_LOOKUP_URL}/{formatted_number}",
        auth=(sid, auth_token),
        params={"Type": "carrier"},
    )
    if response.ok:
        return response.json()["carrier"]["type"]
    elif response.status_code in WHITE_LISTED_TWILIO_CODES:
        return None
    else:
        message = f"Something went wrong looking up number `{formatted_number}`."
        info = {
            "twilio_status_code": response.json().get("status_code"),
            "twilio_error_code": response.json().get("code"),
            "twilio_message": response.json().get("message"),
        }
        raise TwilioLookUpError(message, info)


def can_receive_sms(number_type):
    """Determine if number type is SMS capable."""
    return number_type == "mobile"


def process_phone_number(formatted_number, sid, auth_token):
    """Determine if a formatted number can receive SMS.

    Args:
        formatted_number (str): Appropriately formatted number
            `+<country_code><national_number>`
        sid (str): A Twilio SID
        auth_token (str): A Twilio auth token

    Returns:
        bool indicating if number can receive SMS if number can be looked up, else None
    """
    return can_receive_sms(
        twilio_lookup_phone_number_type(formatted_number, sid, auth_token)
    )


def get_unprocessed_contact_phone_numbers(db_url, search_column="id"):
    """Get a list of contact phone numbers that haven't been processed for SMS cap.

    Args:
        db_url (str): the db connection URL
        search_column (str): the name of the unique id column in the db for contact

    Returns:
        list: List of dicts with key/values for the search column and
            `contact_phone_number`
    """
    engine = create_engine(db_url)
    meta = MetaData(bind=engine)
    contact = Table("contact", meta, autoload=True, autoload_with=engine)
    has_can_sms_column = COMMCARE_CAN_RECIEVE_SMS_FIELD_NAME in [
        col.name for col in contact.columns
    ]
    wheres = [
        contact.c.contact_phone_number.isnot(None),
        func.length(contact.c.contact_phone_number) > 0,
    ]
    if has_can_sms_column:
        wheres.append(contact.c.contact_phone_can_receive_sms.is_(None))
    query = select(
        [getattr(contact.c, search_column), contact.c.contact_phone_number]
    ).where(and_(*wheres))
    conn = engine.connect()
    try:
        result = conn.execute(query, x=search_column)
        return [dict(row) for row in result.fetchall()]
    finally:
        conn.close()


def main(
    db_url,
    commcare_user_name,
    commcare_api_key,
    commcare_project_name,
    twilio_sid,
    twilio_token,
    search_column,
):
    """The main routine

    Args:
        db_url (str): the db connection URL
        commcare_user_name (str): The Commcare username (email address)
        commcare_api_key (str): A Commcare API key for the user
        commcare_project_name (str): The Commcare project being exported from
        twilio_sid (str): A Twilio SID
        twilio_token (str): A Twilio auth token
        search_column (str): : The name of the column in the db for contact that
            CommCare will match against in the bulk upload step. See
            https://confluence.dimagi.com/display/commcarepublic/Bulk+Upload+Case+Data

    """
    exit_status = 0
    data = [
        dict(item, **{COMMCARE_CAN_RECIEVE_SMS_FIELD_NAME: None})
        for item in get_unprocessed_contact_phone_numbers(db_url, search_column)
    ]
    formatted = []
    for item in data:
        try:
            item["contact_phone_number"] = format_phone_number(
                item["contact_phone_number"]
            )
            formatted.append(item)
        except phonenumbers.NumberParseException:
            logger.warning(
                f"The number `{item['contact_phone_number']}` for contcact "
                f"`{item[search_column]}` cannot be parsed and will not be further "
                f"processed."
            )
    twilio_processed = []
    exit_status = 0
    try:
        for item in formatted:
            processed = process_phone_number(
                item["contact_phone_number"],
                twilio_sid,
                twilio_token,
            )
            if processed:
                item[COMMCARE_CAN_RECIEVE_SMS_FIELD_NAME] = processed
                twilio_processed.append(item)
            else:
                logger.warning(
                    f"Phone number `{item['contact_phone_number']}` for contact with "
                    f"ID {item['id']} could not be processed by Twilio. Moving on."
                )
    except Exception as exc:
        logger.error(f"Something unexpected happened: {exc.message}")
        exit_status = 1
    finally:
        if twilio_processed:
            logger.info(
                f"Will attempt to upload the {len(twilio_processed)} numbers "
                f"successfully processed by Twilio to CommCare."
            )
            # prep for export. contact_phone_number is already in db and we don't need
            # to send it again.
            for item in twilio_processed:
                del item["contact_phone_number"]
            upload_data_to_commcare(
                twilio_processed,
                commcare_project_name,
                "contact",
                search_column,
                commcare_user_name,
                commcare_api_key,
                "off",
            )
    sys.exit(exit_status)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "--db",
        help="The db url string of the db that contains contact data",
        dest="db_url",
    )
    parser.add_argument(
        "--username",
        help="The Commcare username (email address)",
        dest="commcare_user_name",
    )
    parser.add_argument("--apikey", help="A Commcare API key", dest="commcare_api_key")
    parser.add_argument(
        "--project", help="The Commcare project name", dest="commcare_project_name"
    )
    parser.add_argument(
        "--twilioSID", help="The SID of a Twilio account", dest="twilio_sid"
    )
    parser.add_argument(
        "--twilioToken", help="Auth token for the Twilio account", dest="twilio_token"
    )
    parser.add_argument(
        "--searchColumn",
        help="The column in db that will be matched as ID against Commcare's ID",
        dest="search_column",
        default="id",
    )
    args = parser.parse_args()
    main(
        args.db_url,
        args.commcare_user_name,
        args.commcare_api_key,
        args.commcare_project_name,
        args.twilio_sid,
        args.twilio_token,
        args.search_column,
    )
